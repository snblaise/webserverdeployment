name: Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        type: choice
        options:
          - test
          - staging
          - prod
        default: test
      confirm_destruction:
        description: 'Type "DESTROY" to confirm resource destruction'
        required: true
        type: string
      force_destroy:
        description: 'Force destroy even if resources are protected'
        required: false
        type: boolean
        default: false

permissions:
  id-token: write
  contents: read
  actions: read

env:
  TF_VERSION: 1.6.0
  AWS_REGION: us-east-1
  TF_IN_AUTOMATION: true
  TF_INPUT: false

jobs:
  destroy_infrastructure:
    name: 'Destroy Infrastructure - ${{ github.event.inputs.environment }}'
    runs-on: ubuntu-latest
    
    environment:
      name: ${{ github.event.inputs.environment }}-destroy
    
    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Validate Destruction Confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_destruction }}" != "DESTROY" ]; then
            echo "::error::You must type 'DESTROY' to confirm resource destruction"
            exit 1
          fi
          
          echo "üö® DESTRUCTION CONFIRMED for environment: ${{ github.event.inputs.environment }}"
          echo "‚ö†Ô∏è  This will permanently delete all infrastructure resources!"

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: GitHubActions-Destroy-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        env:
          TARGET_ENV: ${{ github.event.inputs.environment }}
        run: |
          echo "üîß Initializing Terraform for environment: $TARGET_ENV"
          
          # Determine state key based on environment
          STATE_KEY="infrastructure/${{ github.event.repository.name }}/${TARGET_ENV}/terraform.tfstate"
          
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=$STATE_KEY" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_STATE_LOCK_TABLE }}"

      - name: Pre-Destruction Safety Check
        env:
          TARGET_ENV: ${{ github.event.inputs.environment }}
        run: |
          echo "üîç Performing pre-destruction safety checks..."
          
          # Check if state exists
          if ! terraform state list > /dev/null 2>&1; then
            echo "‚ÑπÔ∏è  No Terraform state found for environment: $TARGET_ENV"
            echo "Nothing to destroy."
            exit 0
          fi
          
          # List resources that will be destroyed
          echo "üìã Resources that will be destroyed:"
          terraform state list
          
          # Count resources
          RESOURCE_COUNT=$(terraform state list | wc -l)
          echo "üìä Total resources to destroy: $RESOURCE_COUNT"
          
          # Production safety check
          if [[ "$TARGET_ENV" == "prod" ]]; then
            echo "üö® PRODUCTION DESTRUCTION DETECTED"
            if [ "${{ github.event.inputs.force_destroy }}" != "true" ]; then
              echo "::error::Production destruction requires force_destroy=true"
              exit 1
            fi
            echo "‚ö†Ô∏è  Production destruction approved via force_destroy flag"
          fi

      - name: Generate Destruction Plan
        env:
          TARGET_ENV: ${{ github.event.inputs.environment }}
        run: |
          echo "üìã Generating destruction plan..."
          
          # Determine variable file
          if [ -f "environments/${TARGET_ENV}.tfvars" ]; then
            VAR_FILE="environments/${TARGET_ENV}.tfvars"
          else
            echo "::error::No variable file found for environment: $TARGET_ENV"
            exit 1
          fi
          
          # Generate destroy plan
          terraform plan \
            -destroy \
            -var-file="$VAR_FILE" \
            -out=destroy_plan.tfplan \
            -detailed-exitcode || {
            PLAN_EXIT_CODE=$?
            case $PLAN_EXIT_CODE in
              0)
                echo "‚ÑπÔ∏è  No resources to destroy"
                exit 0
                ;;
              1)
                echo "::error::Terraform destroy plan failed"
                exit 1
                ;;
              2)
                echo "‚úÖ Destroy plan generated successfully"
                ;;
            esac
          }
          
          # Show destroy plan
          echo "üìã Destruction Plan:"
          terraform show -no-color destroy_plan.tfplan

      - name: Backup Current State
        env:
          TARGET_ENV: ${{ github.event.inputs.environment }}
        run: |
          echo "üíæ Creating state backup before destruction..."
          
          # Create backup directory
          mkdir -p backups
          
          # Backup state file
          BACKUP_FILE="backups/terraform-state-backup-${TARGET_ENV}-$(date +%Y%m%d-%H%M%S).json"
          
          if terraform state pull > "$BACKUP_FILE"; then
            echo "‚úÖ State backup created: $BACKUP_FILE"
            
            # Upload backup as artifact
            echo "backup_file=$BACKUP_FILE" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è  Could not create state backup"
          fi

      - name: Execute Destruction
        env:
          TARGET_ENV: ${{ github.event.inputs.environment }}
        run: |
          echo "üö® EXECUTING INFRASTRUCTURE DESTRUCTION"
          echo "Environment: $TARGET_ENV"
          echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          # Apply destroy plan
          terraform apply -auto-approve destroy_plan.tfplan
          
          echo "‚úÖ Infrastructure destruction completed"

      - name: Verify Destruction
        env:
          TARGET_ENV: ${{ github.event.inputs.environment }}
        run: |
          echo "üîç Verifying destruction completion..."
          
          # Check if any resources remain
          REMAINING_RESOURCES=$(terraform state list | wc -l)
          
          if [ "$REMAINING_RESOURCES" -eq "0" ]; then
            echo "‚úÖ All resources successfully destroyed"
          else
            echo "‚ö†Ô∏è  $REMAINING_RESOURCES resources remain in state:"
            terraform state list
            echo "These may be resources that cannot be destroyed automatically"
          fi

      - name: Upload State Backup
        uses: actions/upload-artifact@v4
        if: steps.backup_current_state.outputs.backup_file
        with:
          name: terraform-state-backup-${{ github.event.inputs.environment }}-${{ github.run_id }}
          path: terraform/backups/
          retention-days: 90

      - name: Cleanup Workspace (Optional)
        if: github.event.inputs.environment != 'prod'
        run: |
          echo "üßπ Cleaning up Terraform workspace..."
          
          # For non-production environments, we can clean up the workspace
          if terraform workspace list | grep -q "${{ github.event.inputs.environment }}"; then
            terraform workspace select default
            terraform workspace delete "${{ github.event.inputs.environment }}" || echo "Could not delete workspace"
          fi

      - name: Destruction Summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ github.event.inputs.environment }}';
            const destroyStatus = '${{ job.status }}';
            const forceDestroy = '${{ github.event.inputs.force_destroy }}';
            
            const statusIcon = destroyStatus === 'success' ? '‚úÖ' : '‚ùå';
            
            const output = `
            ## üö® Infrastructure Destruction Summary
            
            **Environment:** \`${environment}\`
            **Status:** ${statusIcon} ${destroyStatus === 'success' ? 'Completed' : 'Failed'}
            **Force Destroy:** ${forceDestroy}
            **Executed By:** @${{ github.actor }}
            **Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            
            ### üìã Destruction Details
            ${destroyStatus === 'success' ? `
            ‚úÖ **Destruction Successful**
            - All infrastructure resources have been destroyed
            - State backup created and uploaded as artifact
            - Environment is now clean for fresh deployment
            ` : `
            ‚ùå **Destruction Failed**
            - Check workflow logs for detailed error information
            - Some resources may still exist and require manual cleanup
            - State backup may have been created for recovery
            `}
            
            ### ‚ö†Ô∏è Important Notes
            - This action permanently deleted infrastructure resources
            - State backup is available as workflow artifact for 90 days
            - To redeploy, use the optimized workflow with fresh configuration
            
            ---
            *Destruction executed by @${{ github.actor }} ‚Ä¢ Run ID: ${{ github.run_id }}*
            `;
            
            // Create commit comment
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: output
            });