# Terraform Compliance Configuration
# This file configures terraform-compliance for policy-as-code validation

# Features directory containing policy files
features: compliance-policies

# Output format for CI/CD integration
output:
  - cli
  - junit

# Quiet mode for cleaner CI output
quiet: false

# Verbose mode for debugging (set to true for troubleshooting)
verbose: false

# Fail on first error (set to false to see all violations)
early: false

# Tags to run specific scenarios (optional)
# tags:
#   - security
#   - compliance

# Exclude specific scenarios if needed
# exclude-tags:
#   - optional

# Custom step definitions directory (if needed)
# steps: custom-steps

# Environment variables for dynamic configuration
# These can be set in CI/CD pipeline
environment:
  # Set to true in production environments
  STRICT_MODE: "${STRICT_MODE:-false}"
  
  # Environment being tested
  TARGET_ENV: "${TARGET_ENV:-test}"
  
  # Enable additional checks for production
  PRODUCTION_CHECKS: "${PRODUCTION_CHECKS:-false}"

# Hooks for custom behavior
hooks:
  # Before all features
  before_all:
    - echo "Starting terraform-compliance validation"
    - echo "Target environment: ${TARGET_ENV}"
  
  # After all features
  after_all:
    - echo "Terraform-compliance validation completed"
  
  # Before each feature
  before_feature:
    - echo "Validating feature: {feature.name}"
  
  # After each scenario (on failure)
  after_scenario_failure:
    - echo "Scenario failed: {scenario.name}"

# Reporting configuration
reporting:
  # Generate detailed reports
  detailed: true
  
  # Include passed scenarios in report
  include_passed: true
  
  # Report file path (for CI/CD artifacts)
  output_file: "compliance-report.xml"

# Integration settings for CI/CD
ci_integration:
  # Exit codes
  success_exit_code: 0
  failure_exit_code: 1
  
  # Timeout for long-running validations (in seconds)
  timeout: 300
  
  # Retry failed scenarios
  retry_count: 0

# Feature-specific configuration
feature_config:
  # IMDSv2 validation
  imdsv2:
    enabled: true
    strict: true
  
  # EBS encryption validation
  ebs_encryption:
    enabled: true
    require_kms: false  # Set to true for production
  
  # Security group validation
  security_groups:
    enabled: true
    strict: true
  
  # Network isolation validation
  subnet_isolation:
    enabled: true
    strict: true
  
  # WAF protection validation
  waf_protection:
    enabled: true
    strict: true
  
  # IAM security validation
  iam_security:
    enabled: true
    strict: true
  
  # Monitoring compliance validation
  monitoring_compliance:
    enabled: true
    strict: false  # Set to true for production
  
  # Tagging compliance validation
  tagging_compliance:
    enabled: true
    strict: false  # Set to true for production
  
  # Load balancer security validation
  load_balancer_security:
    enabled: true
    strict: true
  
  # Patch management validation
  patch_management:
    enabled: true
    strict: true

# Custom variables for policy evaluation
variables:
  # Allowed CIDR blocks for ALB access
  allowed_cidrs:
    - "10.0.0.0/8"
    - "172.16.0.0/12"
    - "192.168.0.0/16"
  
  # Required tags for all resources
  required_tags:
    - "Project"
    - "Environment"
    - "ManagedBy"
    - "Owner"
  
  # Production-specific requirements
  production_requirements:
    deletion_protection: true
    detailed_monitoring: true
    encryption_required: true
    backup_required: true
  
  # Environment-specific settings
  environments:
    test:
      strict_mode: false
      require_encryption: false
      require_monitoring: false
    staging:
      strict_mode: true
      require_encryption: true
      require_monitoring: true
    prod:
      strict_mode: true
      require_encryption: true
      require_monitoring: true
      require_backup: true
      deletion_protection: true
    preview:
      strict_mode: false
      require_encryption: false
      require_monitoring: false
      auto_cleanup: true